[
    {
        "label": "Year",
        "importPath": "year",
        "description": "year",
        "isExtraImport": true,
        "detail": "year",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "event",
        "description": "event",
        "isExtraImport": true,
        "detail": "event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "event",
        "description": "event",
        "isExtraImport": true,
        "detail": "event",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "day",
        "description": "day",
        "isExtraImport": true,
        "detail": "day",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "day",
        "description": "day",
        "isExtraImport": true,
        "detail": "day",
        "documentation": {}
    },
    {
        "label": "Month",
        "importPath": "month",
        "description": "month",
        "isExtraImport": true,
        "detail": "month",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "Model.day",
        "description": "Model.day",
        "isExtraImport": true,
        "detail": "Model.day",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "Model.day",
        "description": "Model.day",
        "isExtraImport": true,
        "detail": "Model.day",
        "documentation": {}
    },
    {
        "label": "DayView",
        "importPath": "View.day_view",
        "description": "View.day_view",
        "isExtraImport": true,
        "detail": "View.day_view",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "Model.event",
        "description": "Model.event",
        "isExtraImport": true,
        "detail": "Model.event",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "Model.calendar",
        "description": "Model.calendar",
        "peekOfCode": "class Calendar:\n    def __init__(self):\n        self.years = {}\n    def addYear(self, year):\n        self.years[year.calendarYear] = year",
        "detail": "Model.calendar",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "Model.day",
        "description": "Model.day",
        "peekOfCode": "class Day:\n    def __init__(self, year, month, day):\n        # keys will be start hours\n        self.events = []\n        self.date = date(year, month, day)\n    # Adds an event to this day\n    def addEvent(self, newEvent: Event):\n        for event in self.events:\n            if newEvent.startTime.hour > event.startTime.hour and newEvent.startTime.hour < event.endTime.hour:\n                raise ValueError(\"Cannot add an event with conflicting event times.\")",
        "detail": "Model.day",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "Model.event",
        "description": "Model.event",
        "peekOfCode": "class Event:\n    # events will be determined either a meeting or a task, then the title will be given, then description, then date, then time of day\n    def __init__(self, title, description, startHour, startMinute, endHour, endMinute):\n        self.title = title\n        self.description = description\n        self.startTime = time(startHour, startMinute, 0)\n        self.endTime = time(endHour, endMinute, 0)",
        "detail": "Model.event",
        "documentation": {}
    },
    {
        "label": "Meeting",
        "kind": 6,
        "importPath": "Model.meeting",
        "description": "Model.meeting",
        "peekOfCode": "class Meeting(Event):\n    def __init__(self, title, description, datetime, recipient):\n        super().__init__(title, description, datetime)\n        # could introduce a recipient class?\n        self.recipient = recipient",
        "detail": "Model.meeting",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 6,
        "importPath": "Model.month",
        "description": "Model.month",
        "peekOfCode": "class Month:\n    # Constructor for a month, in a year, containing a certain number of empty days\n    def __init__(self, name, year, monthNumber, monthLength):\n        if (type(name) != str):\n            raise TypeError(\"Invalid input for name.\")\n        self.name = name\n        self.days = []\n        if (type(year) != int):\n            raise TypeError(\"Invalid input for month's year.\")\n        if (type(monthNumber) != int):",
        "detail": "Model.month",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "Model.task",
        "description": "Model.task",
        "peekOfCode": "class Task(Event):\n    def __init__(self, title, description, datetime, priority):\n        super().__init__(title, description, datetime)\n        if (priority != 1 and priority != 2 and priority != 3):\n            raise TypeError(\"Invalid input for priority.\")\n        self.priority = priority",
        "detail": "Model.task",
        "documentation": {}
    },
    {
        "label": "Year",
        "kind": 6,
        "importPath": "Model.year",
        "description": "Model.year",
        "peekOfCode": "class Year:\n    def __init__(self, calendarYear, leapyear):\n        self.calendarYear = calendarYear\n        self.leapyear = leapyear\n        self.months = []\n        # define a dictionary of the months and their lengths to initialize the year\n        MONTHSDICT = { \"January\" : 31,\n        \"February\" : 28,\n        \"March\" : 31,\n        \"April\" : 30,",
        "detail": "Model.year",
        "documentation": {}
    },
    {
        "label": "CalendarView",
        "kind": 6,
        "importPath": "View.calendar_view",
        "description": "View.calendar_view",
        "peekOfCode": "class CalendarView:\n    def __init__(self, Calendar) -> None:\n        self.year_view = None",
        "detail": "View.calendar_view",
        "documentation": {}
    },
    {
        "label": "DayView",
        "kind": 6,
        "importPath": "View.day_view",
        "description": "View.day_view",
        "peekOfCode": "class DayView:\n    \"\"\" Represents the UI view of a given day \"\"\"\n    def __init__(self, day: Day) -> None:\n        self.day = day\n    def display(self):\n        print(\"-\" * 27)\n        for event in self.day.events:\n            print('|' + ':>25'.format(event.title) + f'{event.startTime.hour}:{event.startTime.minute} -> {event.endTime.hour}:{event.endTime.minute} |')\n        print(\"-\" * 27)",
        "detail": "View.day_view",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "d1 = Day(2022, 1, 1)\ndv1 = DayView(d1)\ne1 = Event(\"Meeting 1\", \"First meeting\", 6, 0, 7, 0)\nd1.addEvent(e1)\ndv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dv1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dv1 = DayView(d1)\ne1 = Event(\"Meeting 1\", \"First meeting\", 6, 0, 7, 0)\nd1.addEvent(e1)\ndv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "e1 = Event(\"Meeting 1\", \"First meeting\", 6, 0, 7, 0)\nd1.addEvent(e1)\ndv1.display()",
        "detail": "main",
        "documentation": {}
    }
]