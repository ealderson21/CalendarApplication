[
    {
        "label": "Year",
        "importPath": "year",
        "description": "year",
        "isExtraImport": true,
        "detail": "year",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "event",
        "description": "event",
        "isExtraImport": true,
        "detail": "event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "event",
        "description": "event",
        "isExtraImport": true,
        "detail": "event",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "model.day",
        "description": "model.day",
        "isExtraImport": true,
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "model.day",
        "description": "model.day",
        "isExtraImport": true,
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "model.day",
        "description": "model.day",
        "isExtraImport": true,
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Month",
        "importPath": "model.month",
        "description": "model.month",
        "isExtraImport": true,
        "detail": "model.month",
        "documentation": {}
    },
    {
        "label": "Month",
        "importPath": "model.month",
        "description": "model.month",
        "isExtraImport": true,
        "detail": "model.month",
        "documentation": {}
    },
    {
        "label": "Year",
        "importPath": "model.year",
        "description": "model.year",
        "isExtraImport": true,
        "detail": "model.year",
        "documentation": {}
    },
    {
        "label": "Year",
        "importPath": "model.year",
        "description": "model.year",
        "isExtraImport": true,
        "detail": "model.year",
        "documentation": {}
    },
    {
        "label": "day_view",
        "importPath": "view",
        "description": "view",
        "isExtraImport": true,
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "month_view",
        "importPath": "view",
        "description": "view",
        "isExtraImport": true,
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "week_view",
        "importPath": "view",
        "description": "view",
        "isExtraImport": true,
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "year_view",
        "importPath": "view",
        "description": "view",
        "isExtraImport": true,
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "model.event",
        "description": "model.event",
        "isExtraImport": true,
        "detail": "model.event",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "model.calendar",
        "description": "model.calendar",
        "peekOfCode": "class Calendar:\n    def __init__(self):\n        self.years = {}\n    def addYear(self, year):\n        self.years[year.calendarYear] = year",
        "detail": "model.calendar",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "model.day",
        "description": "model.day",
        "peekOfCode": "class Day:\n    def __init__(self, year, month, day):\n        # keys will be start hours\n        self.events = []\n        self.date = date(year, month, day)\n    # Adds an event to this day\n    def addEvent(self, newEvent: Event):\n        # for event in self.events:\n        #     if newEvent.startTime.hour > event.startTime.hour and newEvent.startTime.hour < event.endTime.hour:\n        #         raise ValueError(\"Cannot add an event with conflicting event times.\")",
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "model.event",
        "description": "model.event",
        "peekOfCode": "class Event:\n    # events will be determined either a meeting or a task, then the title will be given, then description, then date, then time of day\n    def __init__(self, title, description, startHour, startMinute, endHour, endMinute):\n        if len(title) > 19:\n            raise ValueError(\"Title must be 25 characters or less.\")        \n        self.title = title\n        self.description = description\n        self.startTime = time(startHour, startMinute, 0)\n        self.endTime = time(endHour, endMinute, 0)",
        "detail": "model.event",
        "documentation": {}
    },
    {
        "label": "Meeting",
        "kind": 6,
        "importPath": "model.meeting",
        "description": "model.meeting",
        "peekOfCode": "class Meeting(Event):\n    def __init__(self, title, description, datetime, recipient):\n        super().__init__(title, description, datetime)\n        # could introduce a recipient class?\n        self.recipient = recipient",
        "detail": "model.meeting",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 6,
        "importPath": "model.month",
        "description": "model.month",
        "peekOfCode": "class Month:\n    # Constructor for a month, in a year, containing a certain number of empty days\n    def __init__(self, name, year, monthNumber, monthLength):\n        self.name = name\n        self.days = []\n        self.monthNumber = monthNumber\n        self.monthLength = monthLength\n        if (monthNumber > 12):\n            raise ValueError(\"Cannot have a year with monthNumber greater than 12.\")\n        if (monthLength != 28 and monthLength != 29 and monthLength != 30 and monthLength != 31):",
        "detail": "model.month",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "model.task",
        "description": "model.task",
        "peekOfCode": "class Task(Event):\n    def __init__(self, title, description, datetime, priority):\n        super().__init__(title, description, datetime)\n        if (priority != 1 and priority != 2 and priority != 3):\n            raise TypeError(\"Invalid input for priority.\")\n        self.priority = priority",
        "detail": "model.task",
        "documentation": {}
    },
    {
        "label": "Year",
        "kind": 6,
        "importPath": "model.year",
        "description": "model.year",
        "peekOfCode": "class Year:\n    def __init__(self, calendarYear, leapyear):\n        self.calendarYear = calendarYear\n        self.leapyear = leapyear\n        self.months = []\n        # define a dictionary of the months and their lengths to initialize the year\n        MONTHSDICT = { \"January\" : 31,\n        \"February\" : 28,\n        \"March\" : 31,\n        \"April\" : 30,",
        "detail": "model.year",
        "documentation": {}
    },
    {
        "label": "CalendarView",
        "kind": 6,
        "importPath": "view.calendar_view",
        "description": "view.calendar_view",
        "peekOfCode": "class CalendarView:\n    def __init__(self, Calendar) -> None:\n        self.year_view = None",
        "detail": "view.calendar_view",
        "documentation": {}
    },
    {
        "label": "DayView",
        "kind": 6,
        "importPath": "view.day_view",
        "description": "view.day_view",
        "peekOfCode": "class DayView:\n    \"\"\" Represents the UI view of a given day \"\"\"\n    def __init__(self, day: Day) -> None:\n        self.day = day\n    def display(self):\n        print(\"-\" * 40)\n        print(\"| \" + str(self.day.date) + \" \" * 27 + \"|\") \n        print(\"-\" * 460)\n        for event in self.day.events:\n            lineString = f'| {event.title} : {str(event.startTime)[:-3]} -> {str(event.endTime)[:-3]}'",
        "detail": "view.day_view",
        "documentation": {}
    },
    {
        "label": "MonthView",
        "kind": 6,
        "importPath": "view.month_view",
        "description": "view.month_view",
        "peekOfCode": "class MonthView:\n    def __init__(self, month: Month):\n        self.month = month\n        self.weeks = []\n    def display(self):\n        # print header\n        print(\"-\" * 91)\n        print(\"| \" + self.month.name + \" \" * (88 - len(self.month.name)) + \"|\")\n        print(\"-\" * 91)\n        # break the month into 7 day blocks",
        "detail": "view.month_view",
        "documentation": {}
    },
    {
        "label": "WeekView",
        "kind": 6,
        "importPath": "view.week_view",
        "description": "view.week_view",
        "peekOfCode": "class WeekView:\n    \"\"\" Represents the GUI view of a given week\"\"\"\n    def __init__(self, days) -> None:\n        self.days = days\n    def display(self):\n        longestDay = self.days[0]\n        # get the longest day\n        for day in self.days:\n            if len(day.events) > len(longestDay.events):\n                longestDay = day    ",
        "detail": "view.week_view",
        "documentation": {}
    },
    {
        "label": "YearView",
        "kind": 6,
        "importPath": "view.year_view",
        "description": "view.year_view",
        "peekOfCode": "class YearView:\n    def __init__(self, year: Year):\n        self.year = year\n    def display(self):\n        # print header\n        print(\"-\" * 91)\n        print(\"| \" + str(self.year.calendarYear) + \" \" * (88 - len(str(self.year.calendarYear))) + \"|\")\n        print(\"-\" * 91)\n        for month in self.year.months:\n            mv = MonthView(month)",
        "detail": "view.year_view",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "d1 = Day(2022, 1, 1)\ndv1 = day_view.DayView(d1)\ntooLong = \"*\" * 26\n# e1 = Event(tooLong, \"First meeting\", 6, 0, 7, 0)\ne2 = Event(\"Meeting 2\", \"First meeting\", 14, 15, 16, 30)\ne3 = Event(\"Conflicting meeting\", \"First meeting\", 15, 0, 17, 0)\n# d1.addEvent(e1)\nd1.addEvent(e2)\nd1.addEvent(e3)\n# dv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dv1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dv1 = day_view.DayView(d1)\ntooLong = \"*\" * 26\n# e1 = Event(tooLong, \"First meeting\", 6, 0, 7, 0)\ne2 = Event(\"Meeting 2\", \"First meeting\", 14, 15, 16, 30)\ne3 = Event(\"Conflicting meeting\", \"First meeting\", 15, 0, 17, 0)\n# d1.addEvent(e1)\nd1.addEvent(e2)\nd1.addEvent(e3)\n# dv1.display()\nm1 = Month(\"January\", 2022, 1, 28)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tooLong",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tooLong = \"*\" * 26\n# e1 = Event(tooLong, \"First meeting\", 6, 0, 7, 0)\ne2 = Event(\"Meeting 2\", \"First meeting\", 14, 15, 16, 30)\ne3 = Event(\"Conflicting meeting\", \"First meeting\", 15, 0, 17, 0)\n# d1.addEvent(e1)\nd1.addEvent(e2)\nd1.addEvent(e3)\n# dv1.display()\nm1 = Month(\"January\", 2022, 1, 28)\nmv1 = month_view.MonthView(m1)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "e2",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "e2 = Event(\"Meeting 2\", \"First meeting\", 14, 15, 16, 30)\ne3 = Event(\"Conflicting meeting\", \"First meeting\", 15, 0, 17, 0)\n# d1.addEvent(e1)\nd1.addEvent(e2)\nd1.addEvent(e3)\n# dv1.display()\nm1 = Month(\"January\", 2022, 1, 28)\nmv1 = month_view.MonthView(m1)\n# mv1.display()\nwv1 = week_view.WeekView(m1.days[:7])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "e3",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "e3 = Event(\"Conflicting meeting\", \"First meeting\", 15, 0, 17, 0)\n# d1.addEvent(e1)\nd1.addEvent(e2)\nd1.addEvent(e3)\n# dv1.display()\nm1 = Month(\"January\", 2022, 1, 28)\nmv1 = month_view.MonthView(m1)\n# mv1.display()\nwv1 = week_view.WeekView(m1.days[:7])\n# wv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "m1 = Month(\"January\", 2022, 1, 28)\nmv1 = month_view.MonthView(m1)\n# mv1.display()\nwv1 = week_view.WeekView(m1.days[:7])\n# wv1.display()\ny1 = Year(2022, True)\nyv1 = year_view.YearView(y1)\nyv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mv1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "mv1 = month_view.MonthView(m1)\n# mv1.display()\nwv1 = week_view.WeekView(m1.days[:7])\n# wv1.display()\ny1 = Year(2022, True)\nyv1 = year_view.YearView(y1)\nyv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wv1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "wv1 = week_view.WeekView(m1.days[:7])\n# wv1.display()\ny1 = Year(2022, True)\nyv1 = year_view.YearView(y1)\nyv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "y1 = Year(2022, True)\nyv1 = year_view.YearView(y1)\nyv1.display()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "yv1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "yv1 = year_view.YearView(y1)\nyv1.display()",
        "detail": "main",
        "documentation": {}
    }
]